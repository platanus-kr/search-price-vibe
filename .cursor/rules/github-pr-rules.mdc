---
description: 
globs: 
alwaysApply: false
---
# Pull Request 관리 룰

## PR 생성 규칙

### 1. PR 제목 작성 규칙
- **형식**: `[타입] 간결한 설명`
- **타입**:
  - `feat`: 새로운 기능 추가
  - `fix`: 버그 수정
  - `docs`: 문서 수정
  - `style`: 코드 포맷팅, 세미콜론 누락 등
  - `refactor`: 코드 리팩토링
  - `test`: 테스트 코드 추가/수정
  - `chore`: 빌드 업무 수정, 패키지 매니저 수정

### 2. PR 설명 템플릿
```
## 📝 변경사항
- 변경된 내용을 간략히 설명해주세요

## 🔧 변경 이유
- 왜 이 변경이 필요한지 설명해주세요

## 🧪 테스트
- [ ] 테스트 코드 작성 완료
- [ ] 기존 테스트 통과 확인
- [ ] 수동 테스트 완료

## 📋 체크리스트
- [ ] 코드 리뷰 가능한 크기로 분할
- [ ] 커밋 메시지가 명확함
- [ ] 관련 이슈가 연결되어 있음
- [ ] 문서가 업데이트됨 (필요한 경우)
```

## PR 리뷰 규칙

### 1. 리뷰어 할당
- 최소 1명 이상의 리뷰어 필수
- 코드 작성자는 본인의 PR을 리뷰할 수 없음

### 2. 승인 조건
- 모든 테스트 통과
- 최소 1명의 승인 필요
- 변경 요청이 모두 해결됨

### 3. 머지 조건
- CI/CD 파이프라인 통과
- 충돌 해결 완료
- 브랜치가 최신 상태

## 브랜치 전략

### 1. 브랜치 명명 규칙
- **형식**: `타입/간략한-설명`
- **예시**: 
  - `feat/user-authentication`
  - `fix/login-error`
  - `refactor/database-connection`

### 2. 브랜치 관리
- `main`: 운영 환경 배포용 브랜치
- `develop`: 개발 통합 브랜치
- `feature/*`: 기능 개발 브랜치
- `hotfix/*`: 긴급 수정 브랜치
