name: Issue Auto Assigner

on:
  issues:
    types: [opened, reopened]

jobs:
  assign-issue:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read

    steps:
    - name: Auto Assign Issue
      uses: actions/github-script@v6
      with:
        script: |
          const { owner, repo, number } = context.issue;
          const issue = context.payload.issue;
          const author = issue.user.login;
          
          // 팀 멤버 및 전문 분야 (실제 프로젝트에 맞게 수정하세요)
          const teamMembers = {
            'project-manager': ['general', 'planning', 'coordination'],
            'tech-lead': ['architecture', 'technical', 'review'],
            'backend-dev': ['backend', 'api', 'database', 'server'],
            'frontend-dev': ['frontend', 'ui', 'ux', 'client'],
            'qa-engineer': ['testing', 'quality', 'bug'],
            'devops-engineer': ['deployment', 'infrastructure', 'ci/cd', 'docker']
          };
          
          // 이슈 내용 분석
          const title = issue.title.toLowerCase();
          const body = (issue.body || '').toLowerCase();
          const fullText = title + ' ' + body;
          
          let assignees = [];
          let assignmentReason = '';
          
          // 이슈 타입별 자동 할당 로직
          if (title.includes('[bug]') || title.includes('bug') || fullText.includes('error') || fullText.includes('문제')) {
            // 버그는 QA 엔지니어에게 우선 할당
            if (teamMembers['qa-engineer']) {
              assignees.push('qa-engineer');
              assignmentReason = '🐛 버그 리포트로 분류되어 QA 엔지니어에게 할당되었습니다.';
            }
            
            // 백엔드/프론트엔드 관련 버그인지 확인
            if (fullText.includes('backend') || fullText.includes('api') || fullText.includes('server') || fullText.includes('database')) {
              if (teamMembers['backend-dev'] && !assignees.includes('backend-dev')) {
                assignees.push('backend-dev');
                assignmentReason += ' 백엔드 관련 이슈로 백엔드 개발자도 할당되었습니다.';
              }
            }
            
            if (fullText.includes('frontend') || fullText.includes('ui') || fullText.includes('client') || fullText.includes('브라우저')) {
              if (teamMembers['frontend-dev'] && !assignees.includes('frontend-dev')) {
                assignees.push('frontend-dev');
                assignmentReason += ' 프론트엔드 관련 이슈로 프론트엔드 개발자도 할당되었습니다.';
              }
            }
            
          } else if (title.includes('[feature]') || title.includes('feature') || fullText.includes('기능') || fullText.includes('추가')) {
            // 기능 요청은 프로젝트 매니저에게 우선 할당
            if (teamMembers['project-manager']) {
              assignees.push('project-manager');
              assignmentReason = '🚀 기능 요청으로 분류되어 프로젝트 매니저에게 할당되었습니다.';
            }
            
            // 기술적 검토가 필요한 경우 기술 리드도 할당
            if (fullText.includes('architecture') || fullText.includes('기술') || fullText.includes('설계')) {
              if (teamMembers['tech-lead'] && !assignees.includes('tech-lead')) {
                assignees.push('tech-lead');
                assignmentReason += ' 기술적 검토가 필요하여 기술 리드도 할당되었습니다.';
              }
            }
            
          } else if (title.includes('[question]') || title.includes('question') || fullText.includes('질문') || fullText.includes('어떻게')) {
            // 질문은 기술 리드에게 우선 할당
            if (teamMembers['tech-lead']) {
              assignees.push('tech-lead');
              assignmentReason = '❓ 질문으로 분류되어 기술 리드에게 할당되었습니다.';
            }
            
          } else if (title.includes('[docs]') || title.includes('documentation') || fullText.includes('문서')) {
            // 문서 관련은 프로젝트 매니저에게 할당
            if (teamMembers['project-manager']) {
              assignees.push('project-manager');
              assignmentReason = '📚 문서 관련 이슈로 프로젝트 매니저에게 할당되었습니다.';
            }
            
          } else if (fullText.includes('deploy') || fullText.includes('ci/cd') || fullText.includes('infrastructure') || fullText.includes('배포')) {
            // DevOps 관련 이슈
            if (teamMembers['devops-engineer']) {
              assignees.push('devops-engineer');
              assignmentReason = '🚀 DevOps 관련 이슈로 DevOps 엔지니어에게 할당되었습니다.';
            }
            
          } else {
            // 기본적으로 프로젝트 매니저에게 할당
            if (teamMembers['project-manager']) {
              assignees.push('project-manager');
              assignmentReason = '📋 일반 이슈로 프로젝트 매니저에게 할당되었습니다.';
            }
          }
          
          // 우선순위 높은 이슈는 기술 리드도 추가 할당
          if (fullText.includes('urgent') || fullText.includes('critical') || fullText.includes('긴급') || fullText.includes('심각')) {
            if (teamMembers['tech-lead'] && !assignees.includes('tech-lead')) {
              assignees.push('tech-lead');
              assignmentReason += ' 높은 우선순위로 기술 리드도 추가 할당되었습니다.';
            }
          }
          
          // 이슈 작성자가 팀 멤버인 경우 본인도 할당
          const allMembers = Object.keys(teamMembers);
          if (allMembers.includes(author) && !assignees.includes(author)) {
            assignees.push(author);
          }
          
          try {
            // 담당자 할당
            if (assignees.length > 0) {
              await github.rest.issues.addAssignees({
                owner,
                repo,
                issue_number: number,
                assignees: assignees
              });
              
              console.log(`이슈 #${number}에 담당자 할당됨: ${assignees.join(', ')}`);
              
              // 할당 결과 댓글 추가
              const comment = `👤 **자동 담당자 할당 완료**
              
              **할당된 담당자:** ${assignees.map(assignee => `@${assignee}`).join(', ')}
              
              **할당 사유:** ${assignmentReason}
              
              **다음 단계:**
              1. 담당자가 이슈를 검토합니다
              2. 필요시 추가 정보를 요청합니다
              3. 작업 일정을 수립하고 알려드립니다
              
              담당자 변경이 필요하시면 댓글로 알려주세요! 🔄`;
              
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: number,
                body: comment
              });
              
            } else {
              // 할당할 담당자가 없는 경우
              const comment = `⚠️ **자동 할당 실패**
              
              적절한 담당자를 찾을 수 없습니다. 프로젝트 매니저가 수동으로 담당자를 할당할 예정입니다.
              
              더 정확한 할당을 위해 이슈 제목에 다음과 같은 태그를 포함해주세요:
              - \`[Bug]\`: 버그 신고
              - \`[Feature]\`: 기능 요청
              - \`[Question]\`: 질문
              - \`[Docs]\`: 문서 관련`;
              
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: number,
                body: comment
              });
            }
            
          } catch (error) {
            console.error('이슈 할당 중 오류:', error);
            
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: number,
              body: `⚠️ 자동 할당 중 오류가 발생했습니다. 수동으로 담당자를 할당해 주세요.\n\n오류: ${error.message}`
            });
          } 